{"code":"import { isObject } from 'tn-validate';\r\nexport const mergeTwo = (deep, recessive, dominant) => {\r\n    const merged = { ...recessive, ...dominant };\r\n    if (!deep)\r\n        return merged;\r\n    Object.entries(merged).forEach(([prop, domival]) => {\r\n        if (isObject(domival)) {\r\n            const receval = recessive[prop];\r\n            if (isObject(receval))\r\n                merged[prop] = mergeTwo(deep, receval, domival);\r\n        }\r\n    });\r\n    return merged;\r\n};\r\n","references":["/Users/jawad/Workshop/NPM/tn-mergeobj/node_modules/tn-validate/dist/types/index.d.ts","/Users/jawad/Workshop/NPM/tn-mergeobj/node_modules/tn-typescript/dist/types/index.d.ts"],"dts":{"name":"/Users/jawad/Workshop/NPM/tn-mergeobj/dist/types/core/mergeTwo.d.ts","writeByteOrderMark":false,"text":"import { AnyObject } from 'tn-typescript';\r\nexport declare const mergeTwo: (deep: boolean, recessive: AnyObject, dominant: AnyObject) => {\r\n    [x: string]: any;\r\n};\r\n"}}
